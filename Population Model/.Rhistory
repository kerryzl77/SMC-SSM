constants <- list(T = nrow(Combined_Data))
# Initial values
phi_initial <- mean(1 - (Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(
phi = phi_initial,
beta = beta_initial,
sigma_observation = 10000,
Population_initial = Combined_Data$Population[1]
)
# Build the model
normalModel <- nimbleModel(
normalModelCode,
data = data,
constants = constants,
inits = initial_values
)
# Compile the model
compiledModel <- compileNimble(normalModel)
# build bootstrap filter for state estimation
bootstrapFilter <- buildBootstrapFilter(normalModel, nodes = 'S', + control = list(saveAll = TRUE, thresh = 0.9))
library(ggplot2)
library(data.table)
library(readxl)
library(dplyr)
library(nimble)
library(nimbleSMC)
# Tt <- matrix(phi + beta, nrow = 1, ncol = 1) # 1x1 Transition matrix
# start the particle filter work with this constant
################################################################################################################
# Set working directory
setwd('/Users/liuzikai/Desktop/Population Model')
# Read birth data
Birth_Data <- read.csv('Births Count 1838-2022.csv', skip = 7) %>%
select(Year = 1, Birth_Count = 2) %>%
mutate(Type = "Birth")
# Read death data
Death_Data <- read_excel('Death 1838-2021.xlsx', range = "A5:B189", sheet = 1) %>%
rename(Year = 1, Death_Count = 2) %>%
mutate(Type = "Death")
Combined_Data <- inner_join(Birth_Data, Death_Data, by = "Year")
Combined_Data <- Combined_Data %>%
select(Year, Birth_Count, Death_Count)
head(Combined_Data)
# # Plotting Birth and Death counts on the same graph
# ggplot(data = Combined_Data, aes(x = Year)) +
#   geom_line(aes(y = Birth_Count, color = "Births")) +
#   geom_line(aes(y = Death_Count, color = "Deaths")) +
#   labs(x = "Year", y = "Count", color = "Event Type") +
#   theme_minimal()
Population_Data <- read_excel('Population-Statistic/Population 1871-2021.xlsx',
sheet = 'Data',
range = "B6:C156",
col_names = c('Year', 'Population')) %>%
mutate(Year = as.numeric(Year))
Combined_Data <- inner_join(Combined_Data, Population_Data, by = "Year")
################################################################################################################
#####################################
# S[t] represents the true (but unobserved) state of the population
normalModelCode <- nimbleCode({
# Priors for the parameters
phi ~ dunif(0, 1)   # survival rate
beta ~ dnorm(0, sd = 1000)   # birth rate
sigma_observation ~ dunif(0, 1000)  # observation error standard deviation
# Initial state
S[1] ~ dnorm(Population_initial, sd = sqrt(Population_initial))
# Process Equation
for (t in 2:T) {
# Process equation Survival & Birth Process
S[t] ~ dnorm(phi * S[t-1] + beta * S[t-1], sd = sqrt(S[t-1]))  # Variance proportional to S[t-1]
}
# Measurement Equation
for (t in 1:T) {
y[t] ~ dnorm(S[t], sd = sigma_observation)  # Observation model
}
})
# Data for the model
data <- list(
y = Combined_Data$Population
)
constants <- list(T = nrow(Combined_Data))
# Initial values
phi_initial <- mean(1 - (Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(
phi = phi_initial,
beta = beta_initial,
sigma_observation = 10000,
Population_initial = Combined_Data$Population[1]
)
# Build the model
normalModel <- nimbleModel(
normalModelCode,
data = data,
constants = constants,
inits = initial_values
)
# Compile the model
compiledModel <- compileNimble(normalModel)
# build bootstrap filter for state estimation
bootstrapFilter <- buildBootstrapFilter(normalModel, nodes = "S",
+ control = list(saveAll = TRUE, thresh = 0.9))
?buildBootstrapFilter
library(ggplot2)
library(data.table)
library(readxl)
library(dplyr)
library(nimble)
library(nimbleSMC)
# Tt <- matrix(phi + beta, nrow = 1, ncol = 1) # 1x1 Transition matrix
# start the particle filter work with this constant
################################################################################################################
# Set working directory
setwd('/Users/liuzikai/Desktop/Population Model')
# Read birth data
Birth_Data <- read.csv('Births Count 1838-2022.csv', skip = 7) %>%
select(Year = 1, Birth_Count = 2) %>%
mutate(Type = "Birth")
# Read death data
Death_Data <- read_excel('Death 1838-2021.xlsx', range = "A5:B189", sheet = 1) %>%
rename(Year = 1, Death_Count = 2) %>%
mutate(Type = "Death")
Combined_Data <- inner_join(Birth_Data, Death_Data, by = "Year")
Combined_Data <- Combined_Data %>%
select(Year, Birth_Count, Death_Count)
head(Combined_Data)
# # Plotting Birth and Death counts on the same graph
# ggplot(data = Combined_Data, aes(x = Year)) +
#   geom_line(aes(y = Birth_Count, color = "Births")) +
#   geom_line(aes(y = Death_Count, color = "Deaths")) +
#   labs(x = "Year", y = "Count", color = "Event Type") +
#   theme_minimal()
Population_Data <- read_excel('Population-Statistic/Population 1871-2021.xlsx',
sheet = 'Data',
range = "B6:C156",
col_names = c('Year', 'Population')) %>%
mutate(Year = as.numeric(Year))
Combined_Data <- inner_join(Combined_Data, Population_Data, by = "Year")
################################################################################################################
#####################################
# S[t] represents the true (but unobserved) state of the population
normalModelCode <- nimbleCode({
# Priors for the parameters
phi ~ dunif(0, 1)   # survival rate
beta ~ dnorm(0, sd = 1000)   # birth rate
sigma_observation ~ dunif(0, 1000)  # observation error standard deviation
# Initial state
S[1] ~ dnorm(Population_initial, sd = sqrt(Population_initial))
# Process Equation
for (t in 2:T) {
# Process equation Survival & Birth Process
S[t] ~ dnorm(phi * S[t-1] + beta * S[t-1], sd = sqrt(S[t-1]))  # Variance proportional to S[t-1]
}
# Measurement Equation
for (t in 1:T) {
y[t] ~ dnorm(S[t], sd = sigma_observation)  # Observation model
}
})
# Data for the model
data <- list(
y = Combined_Data$Population
)
constants <- list(T = nrow(Combined_Data))
# Initial values
phi_initial <- mean(1 - (Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(
phi = phi_initial,
beta = beta_initial,
sigma_observation = 10000,
Population_initial = Combined_Data$Population[1]
)
# Build the model
normalModel <- nimbleModel(
normalModelCode,
data = data,
constants = constants,
inits = initial_values
)
# Compile the model
compiledModel <- compileNimble(normalModel)
# build bootstrap filter for state estimation
bootstrapFilter <- buildBootstrapFilter(normalModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.9))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 5000
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
hist(posteriorSamples)
unique(posteriorSamples)
################################################################################################################
# YOY actual population change
actual_growth <- c(NA, diff(Combined_Data$Population))
# Expected growth from birth and death data
expected_growth <- Combined_Data$Birth_Count - Combined_Data$Death_Count
# Immigrant gap
immigrant_gap <- actual_growth - expected_growth
Population_Growth_Data <- data.frame(
Year = Combined_Data$Year,
Expected_Growth = expected_growth,
Actual_Growth = actual_growth,
Immigrant_Gap = immigrant_gap
)
Population_Growth_Data <- Population_Growth_Data[-1, ]
# View the new data frame
head(Population_Growth_Data)
plot(Population_Growth_Data$Immigrant_Gap)
#
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
plot(timeSeriesEstimates, type = "l")
library(ggplot2)
library(data.table)
library(readxl)
library(dplyr)
library(nimble)
library(nimbleSMC)
# Tt <- matrix(phi + beta, nrow = 1, ncol = 1) # 1x1 Transition matrix
# start the particle filter work with this constant
################################################################################################################
# Set working directory
setwd('/Users/liuzikai/Desktop/Population Model')
# Read birth data
Birth_Data <- read.csv('Births Count 1838-2022.csv', skip = 7) %>%
select(Year = 1, Birth_Count = 2) %>%
mutate(Type = "Birth")
# Read death data
Death_Data <- read_excel('Death 1838-2021.xlsx', range = "A5:B189", sheet = 1) %>%
rename(Year = 1, Death_Count = 2) %>%
mutate(Type = "Death")
Combined_Data <- inner_join(Birth_Data, Death_Data, by = "Year")
Combined_Data <- Combined_Data %>%
select(Year, Birth_Count, Death_Count)
head(Combined_Data)
# # Plotting Birth and Death counts on the same graph
# ggplot(data = Combined_Data, aes(x = Year)) +
#   geom_line(aes(y = Birth_Count, color = "Births")) +
#   geom_line(aes(y = Death_Count, color = "Deaths")) +
#   labs(x = "Year", y = "Count", color = "Event Type") +
#   theme_minimal()
Population_Data <- read_excel('Population-Statistic/Population 1871-2021.xlsx',
sheet = 'Data',
range = "B6:C156",
col_names = c('Year', 'Population')) %>%
mutate(Year = as.numeric(Year))
Combined_Data <- inner_join(Combined_Data, Population_Data, by = "Year")
################################################################################################################
#####################################
# S[t] represents the true (but unobserved) state of the population
#####################################
normalModelCode <- nimbleCode({
# Priors for the parameters
phi ~ dunif(0, 1)   # survival rate
beta ~ dnorm(0, sd = 1000)   # birth rate
# Initial state
S[1] <- Population_initial
# State equation for the true population size
for (t in 2:T) {
# Calculate expected number of survivors and births
expectedSurvivors <- S[t-1] * phi
expectedBirths <- beta * S[t-1]
# Survival process (Binomial)
survivors[t] ~ dbinom(expectedSurvivors, size = S[t-1])
# Birth process (Poisson)
births[t] ~ dpois(expectedBirths)
# Update population size
S[t] ~ dnorm(survivors[t] + births[t], 100)
}
# Measurement equation for the observed population
for (t in 1:T) {
y[t] ~ dnorm(S[t], sd = sqrt(variance_y))  # Observed population likelihood
}
})
# Data for the model
data <- list(
y = Combined_Data$Population
)
constants <- list(T = nrow(Combined_Data))
# Initial values
phi_initial <- mean(1 - (Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(
phi = phi_initial,
beta = beta_initial,
Population_initial = Combined_Data$Population[1] # Starting observed population
)
# Build the model
normalModel <- nimbleModel(
normalModelCode,
data = data,
constants = constants,
inits = initial_values
)
# Compile the model
compiledModel <- compileNimble(normalModel)
# build bootstrap filter for state estimation
bootstrapFilter <- buildBootstrapFilter(normalModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.9))
library(ggplot2)
library(data.table)
library(readxl)
library(dplyr)
library(nimble)
library(nimbleSMC)
# Tt <- matrix(phi + beta, nrow = 1, ncol = 1) # 1x1 Transition matrix
# start the particle filter work with this constant
################################################################################################################
# Set working directory
setwd('/Users/liuzikai/Desktop/Population Model')
# Read birth data
Birth_Data <- read.csv('Births Count 1838-2022.csv', skip = 7) %>%
select(Year = 1, Birth_Count = 2) %>%
mutate(Type = "Birth")
# Read death data
Death_Data <- read_excel('Death 1838-2021.xlsx', range = "A5:B189", sheet = 1) %>%
rename(Year = 1, Death_Count = 2) %>%
mutate(Type = "Death")
Combined_Data <- inner_join(Birth_Data, Death_Data, by = "Year")
Combined_Data <- Combined_Data %>%
select(Year, Birth_Count, Death_Count)
head(Combined_Data)
# # Plotting Birth and Death counts on the same graph
# ggplot(data = Combined_Data, aes(x = Year)) +
#   geom_line(aes(y = Birth_Count, color = "Births")) +
#   geom_line(aes(y = Death_Count, color = "Deaths")) +
#   labs(x = "Year", y = "Count", color = "Event Type") +
#   theme_minimal()
Population_Data <- read_excel('Population-Statistic/Population 1871-2021.xlsx',
sheet = 'Data',
range = "B6:C156",
col_names = c('Year', 'Population')) %>%
mutate(Year = as.numeric(Year))
Combined_Data <- inner_join(Combined_Data, Population_Data, by = "Year")
################################################################################################################
#####################################
# S[t] represents the true (but unobserved) state of the population
#####################################
normalModelCode <- nimbleCode({
# Priors for the parameters
phi ~ dunif(0, 1)   # survival rate
beta ~ dnorm(0, sd = 1000)   # birth rate
# Initial state
S[1] ~ dnorm(Population_initial, sd = 100)  # You may adjust the standard deviation
# State equation for the true population size
for (t in 2:T) {
# Calculate expected number of survivors and births
expectedSurvivors <- S[t-1] * phi
expectedBirths <- beta * S[t-1]
# Survival process (Binomial)
survivors[t] ~ dbinom(expectedSurvivors, size = S[t-1])
# Birth process (Poisson)
births[t] ~ dpois(expectedBirths)
# Update population size
S[t] ~ dnorm(survivors[t] + births[t], 100)
}
# Measurement equation for the observed population
for (t in 1:T) {
y[t] ~ dnorm(S[t], sd = sqrt(variance_y))  # Observed population likelihood
}
})
# Data for the model
data <- list(
y = Combined_Data$Population
)
constants <- list(T = nrow(Combined_Data))
# Initial values
phi_initial <- mean(1 - (Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(
phi = phi_initial,
beta = beta_initial,
Population_initial = Combined_Data$Population[1] # Starting observed population
)
# Build the model
normalModel <- nimbleModel(
normalModelCode,
data = data,
constants = constants,
inits = initial_values
)
# Compile the model
compiledModel <- compileNimble(normalModel)
# build bootstrap filter for state estimation
bootstrapFilter <- buildBootstrapFilter(normalModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.9))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 5000
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
hist(posteriorSamples)
# unique(posteriorSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
plot(timeSeriesEstimates, type = "l")
unique(posteriorSamples)
library(ggplot2)
library(data.table)
library(readxl)
library(dplyr)
library(nimble)
library(nimbleSMC)
# Tt <- matrix(phi + beta, nrow = 1, ncol = 1) # 1x1 Transition matrix
# start the particle filter work with this constant
################################################################################################################
# Set working directory
setwd('/Users/liuzikai/Desktop/Population Model')
# Read birth data
Birth_Data <- read.csv('Births Count 1838-2022.csv', skip = 7) %>%
select(Year = 1, Birth_Count = 2) %>%
mutate(Type = "Birth")
# Read death data
Death_Data <- read_excel('Death 1838-2021.xlsx', range = "A5:B189", sheet = 1) %>%
rename(Year = 1, Death_Count = 2) %>%
mutate(Type = "Death")
Combined_Data <- inner_join(Birth_Data, Death_Data, by = "Year")
Combined_Data <- Combined_Data %>%
select(Year, Birth_Count, Death_Count)
head(Combined_Data)
# # Plotting Birth and Death counts on the same graph
# ggplot(data = Combined_Data, aes(x = Year)) +
#   geom_line(aes(y = Birth_Count, color = "Births")) +
#   geom_line(aes(y = Death_Count, color = "Deaths")) +
#   labs(x = "Year", y = "Count", color = "Event Type") +
#   theme_minimal()
Population_Data <- read_excel('Population-Statistic/Population 1871-2021.xlsx',
sheet = 'Data',
range = "B6:C156",
col_names = c('Year', 'Population')) %>%
mutate(Year = as.numeric(Year))
Combined_Data <- inner_join(Combined_Data, Population_Data, by = "Year")
################################################################################################################
#####################################
# S[t] represents the true (but unobserved) state of the population
normalModelCode <- nimbleCode({
# Priors for the parameters
phi ~ dunif(0, 1)   # survival rate
beta ~ dnorm(0, sd = 1000)   # birth rate
sigma_observation ~ dunif(0, 1000)  # observation error standard deviation
# Initial state
S[1] ~ dnorm(Population_initial, sd = sqrt(Population_initial))
# Process Equation
for (t in 2:T) {
# Process equation Survival & Birth Process
S[t] ~ dnorm(phi * S[t-1] + beta * S[t-1], sd = sqrt(S[t-1]))  # Variance proportional to S[t-1]
}
# Measurement Equation
for (t in 1:T) {
y[t] ~ dnorm(S[t], sd = sigma_observation)  # Observation model
}
})
# Data for the model
data <- list(
y = Combined_Data$Population
)
constants <- list(T = nrow(Combined_Data))
# Initial values
phi_initial <- mean(1 - (Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(
phi = phi_initial,
beta = beta_initial,
sigma_observation = 10000,
Population_initial = Combined_Data$Population[1]
)
# Build the model
normalModel <- nimbleModel(
normalModelCode,
data = data,
constants = constants,
inits = initial_values
)
# Compile the model
compiledModel <- compileNimble(normalModel)
# build bootstrap filter for state estimation
bootstrapFilter <- buildBootstrapFilter(normalModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.9))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 5000
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
hist(posteriorSamples)
unique(posteriorSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
plot(timeSeriesEstimates, type = "l")
################################################################################################################
# YOY actual population change
actual_growth <- c(NA, diff(Combined_Data$Population))
# Expected growth from birth and death data
expected_growth <- Combined_Data$Birth_Count - Combined_Data$Death_Count
# Immigrant gap
immigrant_gap <- actual_growth - expected_growth
Population_Growth_Data <- data.frame(
Year = Combined_Data$Year,
Expected_Growth = expected_growth,
Actual_Growth = actual_growth,
Immigrant_Gap = immigrant_gap
)
Population_Growth_Data <- Population_Growth_Data[-1, ]
# View the new data frame
head(Population_Growth_Data)
plot(Population_Growth_Data$Immigrant_Gap)
#

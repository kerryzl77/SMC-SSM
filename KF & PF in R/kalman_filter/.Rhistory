data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = c("beta", paste0("S[", 1:constants$T, "]"))
control = list(saveAll = TRUE, thresh = 0.1))
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = c("beta", "S"))
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S")
control = list(saveAll = TRUE, thresh = 0.1))
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.1))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 200
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
# Add a Year column to timeSeriesEstimates that corresponds to the years in Population_Data
years = Combined_Data$Year  # assuming the years in Population_Data align with the indices of timeSeriesEstimates
timeSeriesEstimates_df = data.frame(Year = years, Estimated_Population = timeSeriesEstimates)
# Estimation as line and Obs as points
plot(timeSeriesEstimates_df$Year, timeSeriesEstimates_df$Estimated_Population, type = "l", col = "red",
xlab = "Year", ylab = "Population", main = "SMC - Population Estimates vs Actual")
points(Combined_Data$Year, Combined_Data$Population, col = "blue", pch = 16)
length(unique(posteriorSamples[,183]))
hist(posteriorSamples[,183])
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t] + I[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.1))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 200
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
# Add a Year column to timeSeriesEstimates that corresponds to the years in Population_Data
years = Combined_Data$Year  # assuming the years in Population_Data align with the indices of timeSeriesEstimates
timeSeriesEstimates_df = data.frame(Year = years, Estimated_Population = timeSeriesEstimates)
# Estimation as line and Obs as points
plot(timeSeriesEstimates_df$Year, timeSeriesEstimates_df$Estimated_Population, type = "l", col = "red",
xlab = "Year", ylab = "Population", main = "SMC - Population Estimates vs Actual")
points(Combined_Data$Year, Combined_Data$Population, col = "blue", pch = 16)
length(unique(posteriorSamples[,183]))
hist(posteriorSamples[,183])
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t] + I[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.5))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 200
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
# Add a Year column to timeSeriesEstimates that corresponds to the years in Population_Data
years = Combined_Data$Year  # assuming the years in Population_Data align with the indices of timeSeriesEstimates
timeSeriesEstimates_df = data.frame(Year = years, Estimated_Population = timeSeriesEstimates)
# Estimation as line and Obs as points
plot(timeSeriesEstimates_df$Year, timeSeriesEstimates_df$Estimated_Population, type = "l", col = "red",
xlab = "Year", ylab = "Population", main = "SMC - Population Estimates vs Actual")
points(Combined_Data$Year, Combined_Data$Population, col = "blue", pch = 16)
length(unique(posteriorSamples[,183]))
hist(posteriorSamples[,183])
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t] + I[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "beta",
control = list(saveAll = TRUE, thresh = 0.5))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 200
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
# Add a Year column to timeSeriesEstimates that corresponds to the years in Population_Data
years = Combined_Data$Year  # assuming the years in Population_Data align with the indices of timeSeriesEstimates
timeSeriesEstimates_df = data.frame(Year = years, Estimated_Population = timeSeriesEstimates)
# Estimation as line and Obs as points
plot(timeSeriesEstimates_df$Year, timeSeriesEstimates_df$Estimated_Population, type = "l", col = "red",
xlab = "Year", ylab = "Population", main = "SMC - Population Estimates vs Actual")
points(Combined_Data$Year, Combined_Data$Population, col = "blue", pch = 16)
length(unique(posteriorSamples[,183]))
hist(posteriorSamples[,183])
library(ggplot2)
library(data.table)
library(FKF)
library(readxl)
library(dplyr)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_path <- "../data/combined_Data_imm.csv"
Combined_Data <- read.csv(data_path)
## <--------------------------------------------------------------------------->
## Kalman Filter: Univariate SSMs for Population Growth
## <--------------------------------------------------------------------------->
## Transition equation:
## alpha[t+1] = Growth rate * alpha[t] + immigration[t], eta[t] ~ N(0, HHt)
## Measurement equation:
## y[t] = alpha[t] + eps[t], eps[t] ~  N(0, GGt)
# Define the parameters (phi, beta)
phi <- mean(1 - (Combined_Data$Death_Count / Combined_Data$Population))
beta <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
years <- Combined_Data$Year
# Constant factor of 1 in measurement equation
Zt <- matrix(1, nrow = 1, ncol = 1)
# Initial state and variance
a0 <- as.double(Combined_Data$Population[!is.na(Combined_Data$Population)][1]) # Initial state
P0 <- matrix(1000) # Initial variance
# Constant factor of state transition matrix
Tt <- matrix(phi + beta, nrow = 1, ncol = 1)
# Observation noise (Set as 3% of the mean population count)
GGt_Default <- matrix(mean(0.03 * Combined_Data$Population), nrow = 1, ncol = 1)
########################
# Observed population
y <- Combined_Data$Population
yt <- rbind(y)
yt[is.na(yt)] <- 0 # Replace NA with 0 for Kalman filtering
dt <- matrix(as.double(Combined_Data$Immigration_Count),nrow = 1)
ct <- matrix(0) # intercepts of the transition and measurement equations
# Process noise
# Approximate with the variance of the yearly differences in population
yearly_differences <- diff(na.omit(Combined_Data$Population))
process_noise_estimate <- (var(yearly_differences))
process_noise_squared <- (sqrt(var(yearly_differences)))
HHt_Default <- matrix(process_noise_estimate)
HHt_squared <- matrix(process_noise_squared)
################################################################################################################
# Fit Kalman Filter and Plot
run_kalman_and_plot <- function(a0, P0, dt, ct, Tt, Zt, HHt, GGt, yt, years, data, plot_title) {
kf <- fkf(a0 = a0, P0 = P0, dt = dt, ct = ct, Tt = Tt, Zt = Zt, HHt = HHt, GGt = GGt, yt = yt)
log_likelihood <- kf$logLik
print(paste("Log-likelihood:", log_likelihood))
# Extract the filtered state estimates
filtered_estimates <- as.numeric(kf$att)
# Calculate standard errors (square root of diagonal elements of Ptt)
standard_errors <- list()
# Loop through each time point in the array
for (i in 1:dim(kf$Ptt)[3]) {
# Extract the standard error (square root of the variance)
se <- (kf$Ptt[1, 1, i])
# Append to the list
standard_errors[i] <- as.numeric(se)
}
standard_errors_vector <- unlist(standard_errors)
# Compute 95% Confidence Interval
ci_upper <- filtered_estimates + (1.96 * standard_errors_vector)
ci_lower <- filtered_estimates - (1.96 * standard_errors_vector)
# Convert the Kalman Filter estimates and Confidence Interval to a data frame for plotting
kf_df <- data.frame(Year = years, Estimated_Population = filtered_estimates,
CI_Upper = ci_upper, CI_Lower = ci_lower)
# Combine with the true population data
Combined_Plot_Data <- left_join(data, kf_df, by = "Year")
# Assuming `kf` is your fitted model object from the `fkf` function
log_likelihood <- kf$logLik
# Calculate k, the number of parameters estimated by your model
# This is a placeholder; you need to replace it with the actual number of parameters
k <- length(a0) + length(P0) + length(dt) + length(ct) + length(Tt) + length(Zt) + length(HHt) + length(GGt)
# Calculate AIC
AIC <- 2*k - 2*log_likelihood
print(paste("AIC:", AIC))
# Plotting with Confidence Interval
ggplot() +
geom_point(data = Combined_Plot_Data, aes(x = Year, y = Population), color = "blue", size = 2) +
geom_line(data = Combined_Plot_Data, aes(x = Year, y = Estimated_Population), color = "red") +
geom_ribbon(data = Combined_Plot_Data, aes(x = Year, ymin = ci_lower, ymax = ci_upper), alpha = 0.5, fill = "grey") +
theme_minimal()+
labs(title = plot_title) # Adding title to the plot
# Calculate and Standardize the residuals
Combined_Plot_Data$residuals <- Combined_Plot_Data$Population - Combined_Plot_Data$Estimated_Population
standard_deviation <- sd(Combined_Plot_Data$residuals, na.rm = TRUE)
Combined_Plot_Data$standardized_residuals <- Combined_Plot_Data$residuals / standard_deviation
ggplot(Combined_Plot_Data, aes(x = standardized_residuals)) +
geom_histogram(aes(y = ..density..), binwidth = .1, fill = "blue", color = "black") +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = "red", size = 1) +
labs(title = "Distribution of Standardized Observation Errors", x = "Standardized Residuals", y = "Density") +
theme_minimal()
}
source("optimizeKalmanParams.R")
optimized_HHt <- optimize_kalman_params(yt, Tt, Zt, a0, P0, dt, ct, HHt_Default, GGt_Default)
run_kalman_and_plot(a0, P0, dt, ct, Tt, Zt, HHt_Default, GGt_Default, yt, years, Combined_Data, 'Default process noise')
run_kalman_and_plot(a0, P0, dt, ct, Tt, Zt, optimized_HHt, GGt_Default, yt, years, Combined_Data, 'Optimized process noise')
run_kalman_and_plot(a0, P0, dt, ct, Tt, Zt, HHt_squared, GGt_Default, yt, years, Combined_Data, 'Squared process noise')

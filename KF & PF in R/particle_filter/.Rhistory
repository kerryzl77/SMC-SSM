weights <- rep(1/num_particles, num_particles) # Reset weights after resampling
}
ess <- length(unique(estimated_population))
# Estimate parameters
estimated_birth_rate <- mean(birth_rate_particles)
estimated_death_rate <- mean(death_rate_particles)
# Calculate Confidence Intervals
lower_CI <- quantile(estimated_population, probs = 0.025)
upper_CI <- quantile(estimated_population, probs = 0.975)
estimated_parameters_and_population <- rbind(estimated_parameters_and_population, data.frame(
Year = data[year, 'Year'],
Estimated_birth_Rate = estimated_birth_rate,
Estimated_Death_Rate = estimated_death_rate,
Observed_Population = observed_population,
Estimated_Population = mean(estimated_population),
Lower_CI = lower_CI,
Upper_CI = upper_CI,
ESS = ess
))
}
return(estimated_parameters_and_population)
}
# Applying the adjusted Bayesian particle filter
adjusted_bayesian_estimated_population_df <- bayesian_particle_filter_adjusted(data)
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the data
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_path <- "../data/combined_Data_imm.csv"
data <- read.csv(data_path)
sdp <- sqrt(1.6e11) # process error set to the optimization result for kalman filter
bayesian_particle_filter_adjusted <- function(data, num_particles = 10000, birth_rate_prior = c(0, 0.1), death_rate_prior = c(0, 0.1), thresh = 0.8) {
# Initialize particles
birth_rate_particles  <- runif(num_particles, birth_rate_prior[1], birth_rate_prior[2])
death_rate_particles <- runif(num_particles, death_rate_prior[1], death_rate_prior[2])
weights <- rep(1/num_particles, num_particles)
estimated_parameters_and_population <- data.frame()
for (year in 2:nrow(data)) {
prev_population <- data[year - 1, 'Population']
observed_population <- data[year, 'Population']
sdo <- sqrt(0.03 * prev_population) # Standard Deviation of Observation each Year
# Simulate process model with changes:
died <- rbinom(num_particles, prev_population, death_rate_particles)  # Binomial death
survived <- prev_population - died                                   # Survivors
births <- rpois(num_particles, lambda = survived * birth_rate_particles) # Poisson birth
estimated_population <- survived + births + data[year, "Immigration_Count"]
# Add normal variation for process error
estimated_population <- estimated_population + rnorm(num_particles, 0, sdp)
# Update weights
weights <- weights * dlnorm(observed_population, meanlog = log(estimated_population), sdlog = log((sdo)), log = FALSE)
weights <- weights + 1e-300
weights <- weights / sum(weights)
# Resample particles
# ess <- sum(weights^2) * num_particles # Calculate Effective Sample Size
ess <- length(unique(estimated_population))
if (ess < num_particles * thresh) { # Resample if ESS below threshold
indices <- sample(1:num_particles, size = num_particles, replace = TRUE, prob = weights)
birth_rate_particles <- birth_rate_particles[indices]
death_rate_particles <- death_rate_particles[indices]
weights <- rep(1/num_particles, num_particles) # Reset weights after resampling
}
# Estimate parameters
estimated_birth_rate <- mean(birth_rate_particles)
estimated_death_rate <- mean(death_rate_particles)
# Calculate Confidence Intervals
lower_CI <- quantile(estimated_population, probs = 0.025)
upper_CI <- quantile(estimated_population, probs = 0.975)
estimated_parameters_and_population <- rbind(estimated_parameters_and_population, data.frame(
Year = data[year, 'Year'],
Estimated_birth_Rate = estimated_birth_rate,
Estimated_Death_Rate = estimated_death_rate,
Observed_Population = observed_population,
Estimated_Population = mean(estimated_population),
Lower_CI = lower_CI,
Upper_CI = upper_CI,
ESS = ess
))
}
return(estimated_parameters_and_population)
}
# Applying the adjusted Bayesian particle filter
adjusted_bayesian_estimated_population_df <- bayesian_particle_filter_adjusted(data)
# Plotting the results
ggplot(adjusted_bayesian_estimated_population_df, aes(x = Year)) +
geom_line(aes(y = Observed_Population, color = "Actual Population")) +
geom_line(aes(y = Estimated_Population, color = "Estimated Population")) +
geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI), alpha = 0.3, col = "grey") +
xlab('Year') +
ylab('Population') +
ggtitle('Particle Filtering Hard-Coded') +
scale_color_manual(values = c('Actual Population' = 'blue', 'Estimated Population' = 'red')) +
theme_minimal()
ggplot(adjusted_bayesian_estimated_population_df, aes(x = Year, y = ESS)) +
geom_line() +
ggtitle("Evolution of Effective Sample Size (ESS)") +
xlab("Year") +
ylab("ESS") +
theme_minimal()
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the data
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_path <- "../data/combined_Data_imm.csv"
data <- read.csv(data_path)
sdp <- sqrt(1.6e11) # process error set to the optimization result for kalman filter
bayesian_particle_filter_adjusted <- function(data, num_particles = 10000, birth_rate_prior = c(0, 0.1), death_rate_prior = c(0, 0.1), thresh = 0.8) {
# Initialize particles
birth_rate_particles  <- runif(num_particles, birth_rate_prior[1], birth_rate_prior[2])
death_rate_particles <- runif(num_particles, death_rate_prior[1], death_rate_prior[2])
weights <- rep(1/num_particles, num_particles)
estimated_parameters_and_population <- data.frame()
for (year in 2:nrow(data)) {
prev_population <- data[year - 1, 'Population']
observed_population <- data[year, 'Population']
sdo <- sqrt(0.03 * prev_population) # Standard Deviation of Observation each Year
# Simulate process model with changes:
died <- rbinom(num_particles, prev_population, death_rate_particles)  # Binomial death
survived <- prev_population - died                                   # Survivors
births <- rpois(num_particles, lambda = survived * birth_rate_particles) # Poisson birth
estimated_population <- survived + births + data[year, "Immigration_Count"]
# Add normal variation for process error
estimated_population <- estimated_population + rnorm(num_particles, 0, sdp)
# Update weights
weights <- weights * dlnorm(observed_population, meanlog = log(estimated_population), sdlog = log((sdo)), log = FALSE)
weights <- weights + 1e-300
weights <- weights / sum(weights)
# Resample particles
ess <- sum(weights^2) * num_particles # Calculate Effective Sample Size
if (ess < num_particles * thresh) { # Resample if ESS below threshold
indices <- sample(1:num_particles, size = num_particles, replace = TRUE, prob = weights)
birth_rate_particles <- birth_rate_particles[indices]
death_rate_particles <- death_rate_particles[indices]
weights <- rep(1/num_particles, num_particles) # Reset weights after resampling
}
# Estimate parameters
estimated_birth_rate <- mean(birth_rate_particles)
estimated_death_rate <- mean(death_rate_particles)
# Calculate Confidence Intervals
lower_CI <- quantile(estimated_population, probs = 0.025)
upper_CI <- quantile(estimated_population, probs = 0.975)
estimated_parameters_and_population <- rbind(estimated_parameters_and_population, data.frame(
Year = data[year, 'Year'],
Estimated_birth_Rate = estimated_birth_rate,
Estimated_Death_Rate = estimated_death_rate,
Observed_Population = observed_population,
Estimated_Population = mean(estimated_population),
Lower_CI = lower_CI,
Upper_CI = upper_CI,
ESS = ess
))
}
return(estimated_parameters_and_population)
}
# Applying the adjusted Bayesian particle filter
adjusted_bayesian_estimated_population_df <- bayesian_particle_filter_adjusted(data)
# Plotting the results
ggplot(adjusted_bayesian_estimated_population_df, aes(x = Year)) +
geom_line(aes(y = Observed_Population, color = "Actual Population")) +
geom_line(aes(y = Estimated_Population, color = "Estimated Population")) +
geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI), alpha = 0.3, col = "grey") +
xlab('Year') +
ylab('Population') +
ggtitle('Particle Filtering Hard-Coded') +
scale_color_manual(values = c('Actual Population' = 'blue', 'Estimated Population' = 'red')) +
theme_minimal()
ggplot(adjusted_bayesian_estimated_population_df, aes(x = Year, y = ESS)) +
geom_line() +
ggtitle("Evolution of Effective Sample Size (ESS)") +
xlab("Year") +
ylab("ESS") +
theme_minimal()
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the data
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_path <- "../data/combined_Data_imm.csv"
data <- read.csv(data_path)
sdp <- sqrt(1.6e11) # process error set to the optimization result for kalman filter
bayesian_particle_filter_adjusted <- function(data, num_particles = 10000, birth_rate_prior = c(0, 0.1), death_rate_prior = c(0, 0.1), thresh = 0.8) {
# Initialize particles
birth_rate_particles  <- runif(num_particles, birth_rate_prior[1], birth_rate_prior[2])
death_rate_particles <- runif(num_particles, death_rate_prior[1], death_rate_prior[2])
weights <- rep(1/num_particles, num_particles)
estimated_parameters_and_population <- data.frame()
for (year in 2:nrow(data)) {
prev_population <- data[year - 1, 'Population']
observed_population <- data[year, 'Population']
sdo <- sqrt(0.03 * prev_population) # Standard Deviation of Observation each Year
# Simulate process model with changes:
died <- rbinom(num_particles, prev_population, death_rate_particles)  # Binomial death
survived <- prev_population - died                                   # Survivors
births <- rpois(num_particles, lambda = survived * birth_rate_particles) # Poisson birth
estimated_population <- survived + births + data[year, "Immigration_Count"]
# Add normal variation for process error
estimated_population <- estimated_population + rnorm(num_particles, 0, sdp)
# Update weights
weights <- weights * dlnorm(observed_population, meanlog = log(estimated_population), sdlog = log((sdo)), log = FALSE)
weights <- weights + 1e-300
weights <- weights / sum(weights)
# Resample particles
ess <- sum(weights^2) * num_particles # Calculate Effective Sample Size
if (ess < num_particles * thresh) { # Resample if ESS below threshold
print('resample')
indices <- sample(1:num_particles, size = num_particles, replace = TRUE, prob = weights)
birth_rate_particles <- birth_rate_particles[indices]
death_rate_particles <- death_rate_particles[indices]
weights <- rep(1/num_particles, num_particles) # Reset weights after resampling
}
# Estimate parameters
estimated_birth_rate <- mean(birth_rate_particles)
estimated_death_rate <- mean(death_rate_particles)
# Calculate Confidence Intervals
lower_CI <- quantile(estimated_population, probs = 0.025)
upper_CI <- quantile(estimated_population, probs = 0.975)
estimated_parameters_and_population <- rbind(estimated_parameters_and_population, data.frame(
Year = data[year, 'Year'],
Estimated_birth_Rate = estimated_birth_rate,
Estimated_Death_Rate = estimated_death_rate,
Observed_Population = observed_population,
Estimated_Population = mean(estimated_population),
Lower_CI = lower_CI,
Upper_CI = upper_CI,
ESS = ess
))
}
return(estimated_parameters_and_population)
}
# Applying the adjusted Bayesian particle filter
adjusted_bayesian_estimated_population_df <- bayesian_particle_filter_adjusted(data)
# Plotting the results
ggplot(adjusted_bayesian_estimated_population_df, aes(x = Year)) +
geom_line(aes(y = Observed_Population, color = "Actual Population")) +
geom_line(aes(y = Estimated_Population, color = "Estimated Population")) +
geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI), alpha = 0.3, col = "grey") +
xlab('Year') +
ylab('Population') +
ggtitle('Particle Filtering Hard-Coded') +
scale_color_manual(values = c('Actual Population' = 'blue', 'Estimated Population' = 'red')) +
theme_minimal()
ggplot(adjusted_bayesian_estimated_population_df, aes(x = Year, y = ESS)) +
geom_line() +
ggtitle("Evolution of Effective Sample Size (ESS)") +
xlab("Year") +
ylab("ESS") +
theme_minimal()
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read the data
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_path <- "../data/combined_Data_imm.csv"
data <- read.csv(data_path)
sdp <- sqrt(1.6e11) # process error set to the optimization result for kalman filter
bayesian_particle_filter_adjusted <- function(data, num_particles = 10000, birth_rate_prior = c(0, 0.1), death_rate_prior = c(0, 0.1), thresh = 0.8) {
# Initialize particles
birth_rate_particles  <- runif(num_particles, birth_rate_prior[1], birth_rate_prior[2])
death_rate_particles <- runif(num_particles, death_rate_prior[1], death_rate_prior[2])
weights <- rep(1/num_particles, num_particles)
estimated_parameters_and_population <- data.frame()
for (year in 2:nrow(data)) {
prev_population <- data[year - 1, 'Population']
observed_population <- data[year, 'Population']
sdo <- sqrt(0.03 * prev_population) # Standard Deviation of Observation each Year
# Simulate process model with changes:
died <- rbinom(num_particles, prev_population, death_rate_particles)  # Binomial death
survived <- prev_population - died                                   # Survivors
births <- rpois(num_particles, lambda = survived * birth_rate_particles) # Poisson birth
estimated_population <- survived + births + data[year, "Immigration_Count"]
# Add normal variation for process error
estimated_population <- estimated_population + rnorm(num_particles, 0, sdp)
# Update weights
weights <- weights * dlnorm(observed_population, meanlog = log(estimated_population), sdlog = log((sdo)), log = FALSE)
weights <- weights + 1e-300
weights <- weights / sum(weights)
# Resample particles
ess <- sum(weights^2) * num_particles # Calculate Effective Sample Size
if (ess < num_particles * thresh) { # Resample if ESS below threshold
print(year)
indices <- sample(1:num_particles, size = num_particles, replace = TRUE, prob = weights)
birth_rate_particles <- birth_rate_particles[indices]
death_rate_particles <- death_rate_particles[indices]
weights <- rep(1/num_particles, num_particles) # Reset weights after resampling
}
# Estimate parameters
estimated_birth_rate <- mean(birth_rate_particles)
estimated_death_rate <- mean(death_rate_particles)
# Calculate Confidence Intervals
lower_CI <- quantile(estimated_population, probs = 0.025)
upper_CI <- quantile(estimated_population, probs = 0.975)
estimated_parameters_and_population <- rbind(estimated_parameters_and_population, data.frame(
Year = data[year, 'Year'],
Estimated_birth_Rate = estimated_birth_rate,
Estimated_Death_Rate = estimated_death_rate,
Observed_Population = observed_population,
Estimated_Population = mean(estimated_population),
Lower_CI = lower_CI,
Upper_CI = upper_CI,
ESS = ess
))
}
return(estimated_parameters_and_population)
}
# Applying the adjusted Bayesian particle filter
adjusted_bayesian_estimated_population_df <- bayesian_particle_filter_adjusted(data)
# Plotting the results
ggplot(adjusted_bayesian_estimated_population_df, aes(x = Year)) +
geom_line(aes(y = Observed_Population, color = "Actual Population")) +
geom_line(aes(y = Estimated_Population, color = "Estimated Population")) +
geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI), alpha = 0.3, col = "grey") +
xlab('Year') +
ylab('Population') +
ggtitle('Particle Filtering Hard-Coded') +
scale_color_manual(values = c('Actual Population' = 'blue', 'Estimated Population' = 'red')) +
theme_minimal()
ggplot(adjusted_bayesian_estimated_population_df, aes(x = Year, y = ESS)) +
geom_line() +
ggtitle("Evolution of Effective Sample Size (ESS)") +
xlab("Year") +
ylab("ESS") +
theme_minimal()
hist(adjusted_bayesian_estimated_population_df$Estimated_Population[,183])
View(adjusted_bayesian_estimated_population_df)
plot(adjusted_bayesian_estimated_population_df$Estimated_birth_Rate)
plot(adjusted_bayesian_estimated_population_df$Estimated_Death_Rate)
plot(adjusted_bayesian_estimated_population_df$Estimated_birth_Rate, main = 'Estimated Birth Rate')
plot(adjusted_bayesian_estimated_population_df$Estimated_birth_Rate, main = 'Estimated Birth Rate', ylab = 'Birth Rate %', xlab = 'Year')
?plot
plot(adjusted_bayesian_estimated_population_df$Estimated_birth_Rate, main = 'Estimated Birth Rate', ylab = 'Birth Rate %', xlab = 'Year', type = "b")
plot(adjusted_bayesian_estimated_population_df$Estimated_birth_Rate, main = 'Estimated Birth Rate', ylab = 'Birth Rate %', xlab = 'Year', type = "l")
plot(adjusted_bayesian_estimated_population_df$Estimated_Death_Rate, main = 'Estimated Death Rate', ylab = 'Death Rate %', xlab = 'Year', type = "l")
ggplot(adjusted_bayesian_estimated_population_df, aes(x = Year)) +
geom_line(aes(y = Estimated_Death_Rate, color = "Estimated Death Rate")) +
geom_line(aes(y = Estimated_birth_Rate, color = "Estimated Birth Rate")) +
xlab('Year') +
ylab('Rate %') +
ggtitle('Estimated Birth & Death Rate') +
scale_color_manual(values = c('Estimated Death Rate' = 'blue', 'Estimated Birth Rate' = 'red')) +
theme_minimal()
View(adjusted_bayesian_estimated_population_df)
ggplot(data = Combined_Data, aes(x = Year)) +
geom_line(aes(y = Birth_rate, color = "Births")) +  # Assign color within aes() for "Births"
geom_line(aes(y = Death_rate, color = "Deaths")) +  # Assign color within aes() for "Deaths"
labs(x = "Year", y = "Rate %", color = "Event Type") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue')) +  # Match the labels and assign colors
ggtitle('Birth and Death Count 1838-2021') +
theme_minimal()
################################################################################################################
# Set working directory
folder_path <- file.path(dirname(rstudioapi::getSourceEditorContext()$path), "/data/Data - England & Wales")
setwd(folder_path)
# Read birth data
Birth_Data <- read.csv('Births Count 1838-2022.csv', skip = 7) %>%
select(Year = 1, Birth_Count = 2) %>%
mutate(Type = "Birth")
# Read death data
Death_Data <- read_excel('Death 1838-2021.xlsx', range = "A5:B189", sheet = 1) %>%
rename(Year = 1, Death_Count = 2) %>%
mutate(Type = "Death")
Combined_Data <- Combined_Data %>%
select(Year, Birth_Count, Death_Count)
head(Combined_Data)
Population_Data <- read.csv('England & Wales by Sex 1838-2022.csv', skip = 1) %>%
select(Year = 1, Population = 2, Male_Pop = 3, Female_pop = 4) %>%
mutate(
Year = as.numeric(Year),
Population = as.numeric(gsub(",", "", Population)),
Male_Pop = as.numeric(gsub(",", "", Male_Pop)),
Female_pop = as.numeric(gsub(",", "", Female_pop))
)
Migration_Data <- read_excel('Migration 1964-2023.xlsx', range = "A1:B60", sheet = 3, col_names = FALSE) %>%
setNames(c("Year", "Immigration_Count")) %>%
mutate(
Year = as.numeric(Year),
Immigration_Count = as.numeric(Immigration_Count)
)
Combined_Data <- inner_join(Combined_Data, Population_Data, by = "Year")
Combined_Data <- left_join(Combined_Data, Migration_Data, by = "Year") %>%
mutate(Immigration_Count = ifelse(is.na(Immigration_Count), 0, Immigration_Count))
Combined_Data$Birth_rate <- round(Combined_Data$Birth_Count / Combined_Data$Population,3)
Combined_Data$Death_rate <- round(Combined_Data$Death_Count / Combined_Data$Population,3)
head(Combined_Data)
ggplot(data = data, aes(x = Year)) +
geom_line(aes(y = Birth_rate, color = "Births")) +  # Assign color within aes() for "Births"
geom_line(aes(y = Death_rate, color = "Deaths")) +  # Assign color within aes() for "Deaths"
labs(x = "Year", y = "Rate %", color = "Event Type") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue')) +  # Match the labels and assign colors
ggtitle('Birth and Death Count 1838-2021') +
theme_minimal()
View(data)
################################################################################################################
# Plotting Birth and Death counts on the same graph
ggplot(data = data, aes(x = Year)) +
geom_line(aes(y = Birth_Count, color = "Births")) +  # Assign color within aes() for "Births"
geom_line(aes(y = Death_Count, color = "Deaths")) +  # Assign color within aes() for "Deaths"
labs(x = "Year", y = "Count", color = "Event Type") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue')) +  # Match the labels and assign colors
ggtitle('Birth and Death Count 1838-2021') +
theme_minimal()
ggplot(data = data, aes(x = Year)) +
geom_point(aes(y = Birth_rate, color = "Births")) +  # Assign color within aes() for "Births"
geom_point(aes(y = Death_rate, color = "Deaths")) +  # Assign color within aes() for "Deaths"
labs(x = "Year", y = "Rate %", color = "Event Type") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue')) +  # Match the labels and assign colors
ggtitle('Birth and Death Count 1838-2021') +
theme_minimal()
################################################################################################################
# Plotting Birth and Death counts on the same graph
ggplot(data = data, aes(x = Year)) +
geom_point(aes(y = Birth_Count, color = "Births")) +  # Assign color within aes() for "Births"
geom_point(aes(y = Death_Count, color = "Deaths")) +  # Assign color within aes() for "Deaths"
labs(x = "Year", y = "Count", color = "Event Type") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue')) +  # Match the labels and assign colors
ggtitle('Birth and Death Count 1838-2021') +
theme_minimal()
ggplot(data = data, aes(x = Year)) +
geom_point(aes(y = Birth_rate, color = "Births")) +  # Assign color within aes() for "Births"
geom_point(aes(y = Death_rate, color = "Deaths")) +  # Assign color within aes() for "Deaths"
labs(x = "Year", y = "Rate %", color = "Event Type") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue')) +  # Match the labels and assign colors
ggtitle('Birth and Death Count 1838-2021') +
theme_minimal()
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("..")
data_path <- "../data/combined_Data_imm.csv"
Combined_Data <- read.csv(data_path)
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors
phi ~ dunif(0, 0.1)   # phi (death rate)
beta ~ dunif(0, 0.1)  # beta (birth rate)
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta) # Binomial birth process
d[t] ~ dbin(size = S[t-1], prob = phi)  # Binomial death process
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t] + I[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the SMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.7))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles deafault 10000
parNum <- 10000
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
ESS <- compiledFilter$returnESS()
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
lowerCI <- apply(posteriorSamples, 2, quantile, probs = 0.025)
upperCI <- apply(posteriorSamples, 2, quantile, probs = 0.975)
# Add a Year column to timeSeriesEstimates that corresponds to the years in Population_Data
years = Combined_Data$Year  # assuming the years in Population_Data align with the indices of timeSeriesEstimates
timeSeriesEstimates_df <- data.frame(
Year = years,
Estimated_Population = timeSeriesEstimates,
Lower_CI = lowerCI,
Upper_CI = upperCI
)
ggplot(timeSeriesEstimates_df, aes(x = Year, y = Estimated_Population)) +
geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_CI), alpha = 0.3, col = "grey", size = 2) +  # Confidence interval band
geom_line(col = "red", size = 0.5) +
geom_point(data = Combined_Data, aes(x = Year, y = Population), col = "blue", pch = 16) +
xlab("Year") + ylab("Population") +
ggtitle("SMC - Population Estimates vs Actual with 95% CI") +
theme_minimal()
uniqueParticleCounts <- apply(posteriorSamples, 2, function(x) length(unique(x)))
plot(ESS)
plot(uniqueParticleCounts)
hist(posteriorSamples[,183])
# build bootstrap filter for state estimation
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.8))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles deafault 10000
parNum <- 10000
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)

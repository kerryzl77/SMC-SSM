for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = c("beta", paste0("S[", 1:constants$T, "]"))
control = list(saveAll = TRUE, thresh = 0.1))
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = c("beta", "S"))
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S")
control = list(saveAll = TRUE, thresh = 0.1))
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.1))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 200
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
# Add a Year column to timeSeriesEstimates that corresponds to the years in Population_Data
years = Combined_Data$Year  # assuming the years in Population_Data align with the indices of timeSeriesEstimates
timeSeriesEstimates_df = data.frame(Year = years, Estimated_Population = timeSeriesEstimates)
# Estimation as line and Obs as points
plot(timeSeriesEstimates_df$Year, timeSeriesEstimates_df$Estimated_Population, type = "l", col = "red",
xlab = "Year", ylab = "Population", main = "SMC - Population Estimates vs Actual")
points(Combined_Data$Year, Combined_Data$Population, col = "blue", pch = 16)
length(unique(posteriorSamples[,183]))
hist(posteriorSamples[,183])
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t] + I[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.1))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 200
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
# Add a Year column to timeSeriesEstimates that corresponds to the years in Population_Data
years = Combined_Data$Year  # assuming the years in Population_Data align with the indices of timeSeriesEstimates
timeSeriesEstimates_df = data.frame(Year = years, Estimated_Population = timeSeriesEstimates)
# Estimation as line and Obs as points
plot(timeSeriesEstimates_df$Year, timeSeriesEstimates_df$Estimated_Population, type = "l", col = "red",
xlab = "Year", ylab = "Population", main = "SMC - Population Estimates vs Actual")
points(Combined_Data$Year, Combined_Data$Population, col = "blue", pch = 16)
length(unique(posteriorSamples[,183]))
hist(posteriorSamples[,183])
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t] + I[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "S",
control = list(saveAll = TRUE, thresh = 0.5))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 200
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
# Add a Year column to timeSeriesEstimates that corresponds to the years in Population_Data
years = Combined_Data$Year  # assuming the years in Population_Data align with the indices of timeSeriesEstimates
timeSeriesEstimates_df = data.frame(Year = years, Estimated_Population = timeSeriesEstimates)
# Estimation as line and Obs as points
plot(timeSeriesEstimates_df$Year, timeSeriesEstimates_df$Estimated_Population, type = "l", col = "red",
xlab = "Year", ylab = "Population", main = "SMC - Population Estimates vs Actual")
points(Combined_Data$Year, Combined_Data$Population, col = "blue", pch = 16)
length(unique(posteriorSamples[,183]))
hist(posteriorSamples[,183])
library(ggplot2)
library(data.table)
library(dplyr)
library(nimbleSMC)
library(coda)
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_Data.csv')
Combined_Data <- Combined_Data[,-1]
Combined_Data <- read.csv('/Users/liuzikai/Desktop/Population Model/combined_data_imm.csv')
deviation <- 0.015 * Combined_Data$Population[length(Combined_Data$Population) - 1]
################################################################################################################
stateSpaceModelCode <- nimbleCode({
# Priors for time-varying rates
for(t in 1:T) {
phi[t] ~ dunif(0, 0.1)   # Time-varying phi (death rate) for each year
beta[t] ~ dunif(0, 0.1)  # Time-varying beta (birth rate) for each year
}
# Initial state
S[1] ~ dpois(lambda = N_initial) # Initial surviving population
Y[1] ~ dlnorm(meanlog = log(S[1]), sdlog = log(sdo)) # Observation for initial state
# Process model for subsequent years
for (t in 2:T) {
b[t] ~ dbin(size = S[t-1], prob = beta[t-1]) # Binomial birth process with time-varying rate
d[t] ~ dbin(size = S[t-1], prob = phi[t-1])  # Binomial death process with time-varying rate
S[t] ~ dpois(lambda = S[t-1] + b[t] - d[t] + I[t])
# Observation process
Y[t] ~ dlnorm(meanlog = log(S[t]), sdlog = log(sdo))
}
})
data <- list(
Y = Combined_Data$Population,  # Observed population data
I = Combined_Data$Immigration_Count
)
constants <- list(T = nrow(Combined_Data), N_initial = Combined_Data$Population[1],
sdo = deviation)
# Initial values for the MCMC
phi_initial <- mean((Combined_Data$Death_Count / Combined_Data$Population))
beta_initial <- mean(Combined_Data$Birth_Count / Combined_Data$Population)
initial_values <- list(phi = phi_initial, beta = beta_initial)
inits <- list(
phi = phi_initial,
beta = beta_initial,
N_initial = Combined_Data$Population[1] # First year's population
)
# Build the model
stateSpaceModel <- nimbleModel(stateSpaceModelCode, data = data, constants = constants, inits = inits)
# Compile the model
compiledModel <- compileNimble(stateSpaceModel)
# build bootstrap filter for state estimation
# build bootstrap filter for state estimation
# Specify all nodes you want to monitor, including 'S[t]' for all t, 'beta', and 'phi'
nodes_to_monitor <- c("beta", "phi")
bootstrapFilter <- buildBootstrapFilter(stateSpaceModel, nodes = "beta",
control = list(saveAll = TRUE, thresh = 0.5))
compiledFilter <- compileNimble(bootstrapFilter)
# Number of particles
parNum <- 200
# Run bootstrap filter to estimate state sequences
compiledFilter$run(parNum)
# Extract equally weighted posterior samples of state variables
posteriorSamples <- as.matrix(compiledFilter$mvEWSamples)
# Generate time series estimates of the population dynamic
timeSeriesEstimates <- apply(posteriorSamples, 2, mean)
# Add a Year column to timeSeriesEstimates that corresponds to the years in Population_Data
years = Combined_Data$Year  # assuming the years in Population_Data align with the indices of timeSeriesEstimates
timeSeriesEstimates_df = data.frame(Year = years, Estimated_Population = timeSeriesEstimates)
# Estimation as line and Obs as points
plot(timeSeriesEstimates_df$Year, timeSeriesEstimates_df$Estimated_Population, type = "l", col = "red",
xlab = "Year", ylab = "Population", main = "SMC - Population Estimates vs Actual")
points(Combined_Data$Year, Combined_Data$Population, col = "blue", pch = 16)
length(unique(posteriorSamples[,183]))
hist(posteriorSamples[,183])
library(dplyr)
library(readxl)
library(patchwork)
################################################################################################################
# Set working directory
folder_path <- file.path(dirname(rstudioapi::getSourceEditorContext()$path), "/data/Data - England & Wales")
setwd(folder_path)
# Read birth data
Birth_Data <- read.csv('Births Count 1838-2022.csv', skip = 7) %>%
select(Year = 1, Birth_Count = 2) %>%
mutate(Type = "Birth")
# Read death data
Death_Data <- read_excel('Death 1838-2021.xlsx', range = "A5:B189", sheet = 1) %>%
rename(Year = 1, Death_Count = 2) %>%
mutate(Type = "Death")
Combined_Data <- inner_join(Birth_Data, Death_Data, by = "Year")
Combined_Data <- Combined_Data %>%
select(Year, Birth_Count, Death_Count)
head(Combined_Data)
Population_Data <- read.csv('England & Wales by Sex 1838-2022.csv', skip = 1) %>%
select(Year = 1, Population = 2, Male_Pop = 3, Female_pop = 4) %>%
mutate(
Year = as.numeric(Year),
Population = as.numeric(gsub(",", "", Population)),
Male_Pop = as.numeric(gsub(",", "", Male_Pop)),
Female_pop = as.numeric(gsub(",", "", Female_pop))
)
Migration_Data <- read_excel('Migration 1964-2023.xlsx', range = "A1:B60", sheet = 3, col_names = FALSE) %>%
setNames(c("Year", "Immigration_Count")) %>%
mutate(
Year = as.numeric(Year),
Immigration_Count = as.numeric(Immigration_Count)
)
Combined_Data <- inner_join(Combined_Data, Population_Data, by = "Year")
Combined_Data <- left_join(Combined_Data, Migration_Data, by = "Year") %>%
mutate(Immigration_Count = ifelse(is.na(Immigration_Count), 0, Immigration_Count))
Combined_Data$Birth_rate <- round(Combined_Data$Birth_Count / Combined_Data$Population,3)
Combined_Data$Death_rate <- round(Combined_Data$Death_Count / Combined_Data$Population,3)
head(Combined_Data)
################################################################################################################
# Reproduce Figure 1
p1 <- ggplot(data = Combined_Data, aes(x = Year)) +
geom_line(aes(y = Birth_Count, color = "Births")) +
geom_line(aes(y = Death_Count, color = "Deaths")) +
labs(x = "Year", y = "Count") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue'), guide = FALSE) +
ggtitle('Birth and Death Count 1838-2021') +
theme_minimal()
p2 <- ggplot(data = Combined_Data, aes(x = Year)) +
geom_line(aes(y = Birth_rate, color = "Births")) +
geom_line(aes(y = Death_rate, color = "Deaths")) +
labs(x = "Year", y = "Rate %") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue')) +
ggtitle('Birth and Death Rate 1838-2021') +
theme_minimal()
library(ggplot2)
################################################################################################################
# Reproduce Figure 1
p1 <- ggplot(data = Combined_Data, aes(x = Year)) +
geom_line(aes(y = Birth_Count, color = "Births")) +
geom_line(aes(y = Death_Count, color = "Deaths")) +
labs(x = "Year", y = "Count") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue'), guide = FALSE) +
ggtitle('Birth and Death Count 1838-2021') +
theme_minimal()
p2 <- ggplot(data = Combined_Data, aes(x = Year)) +
geom_line(aes(y = Birth_rate, color = "Births")) +
geom_line(aes(y = Death_rate, color = "Deaths")) +
labs(x = "Year", y = "Rate %") +
scale_color_manual(values = c(Births = 'red', Deaths = 'blue')) +
ggtitle('Birth and Death Rate 1838-2021') +
theme_minimal()
p1 + p2
# Reproduce Figure 3
actual_growth <- c(NA, diff(Combined_Data$Population)) # YOY actual population change
expected_growth <- Combined_Data$Birth_Count - Combined_Data$Death_Count
immigrant_gap <- actual_growth - expected_growth # Gap (actual - expected)
Population_Growth_Data <- data.frame(
Year = Combined_Data$Year,
Expected_Growth = expected_growth,
Actual_Growth = actual_growth,
Immigrant_Gap = immigrant_gap
)
Population_Growth_Data <- Population_Growth_Data[-1, ]
plot(Population_Growth_Data$Year, Population_Growth_Data$Immigrant_Gap, type = "l", main = "Yearly Immigration Gap", xlab = "Year", ylab = "Immigration Gap")
plot(Population_Growth_Data$Year, Population_Growth_Data$Immigrant_Gap, type = "d", main = "Yearly Immigration Gap", xlab = "Year", ylab = "Immigration Gap")
?plot
plot(Population_Growth_Data$Year, Population_Growth_Data$Immigrant_Gap, type = "p", main = "Yearly Immigration Gap", xlab = "Year", ylab = "Immigration Gap")
plot(Population_Growth_Data$Year, Population_Growth_Data$Immigrant_Gap, type = "p", main = "Yearly Net Migration Estimate", xlab = "Year", ylab = "Immigration Gap")
plot(Population_Growth_Data$Year, Population_Growth_Data$Immigrant_Gap, type = "l", main = "Yearly Net Migration Estimate", xlab = "Year", ylab = "Immigration Gap")
